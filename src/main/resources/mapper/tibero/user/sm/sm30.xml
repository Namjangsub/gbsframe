<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dksys.biz.user.sm.sm30.mapper.SM30Mapper">

	<select id="selectPjtInfo" resultType="CamelMap">
		WITH BILL AS (
					SELECT 
							  T.CTRT_NO
							, MAX(T.CTRT_TOT_AMT)   AS CTRT_TOT_AMT
							, SUM(D.CLMN_AMT)	 	AS CLMN_AMT
							, max(M20.BILL_NO)		AS BILL_NO
							, SUM(M20.BILL_AMT)		AS BILL_AMT
							, LISTAGG(M20.BILL_DT || '(' || TO_CHAR(ROUND(M20.BILL_AMT / T.CTRT_TOT_AMT * 100, 0)) || '%)', ',') WITHIN GROUP (ORDER BY M20.BILL_DT) AS BILL_DT
					  FROM TB_SM11M01 T
								LEFT OUTER JOIN TB_SM11D01 AS D ON D.CTRT_NO = T.CTRT_NO	--외주관리 대금현황
					  			LEFT OUTER JOIN TB_SM10M01 AS M10 ON M10.CTRT_NO = D.CTRT_NO AND M10.CTRT_NO_SEQ = D.CTRT_NO_SEQ  --   S10.COST_NO = T.CLNT_CD 	--기타비용
					  			LEFT OUTER JOIN TB_SM12D01 AS D12 ON D12.ORDRG_NO = M10.COST_NO  --매입확정
					  			LEFT OUTER JOIN TB_SM20D01 AS D20 ON D20.PCHS_NO = M10.PCHS_NO  --계산서상세
					  			LEFT OUTER JOIN TB_SM20M01 AS M20 ON M20.BILL_NO = D20.BILL_NO  --계산서상세  매입확정별 계산서 발행임 매입확정을 여러건의 계산서로 분할 금지.
					--  			LEFT OUTER JOIN TB_SM21M01 AS M21 ON M21.BILL_NO = D20.BILL_NO  --지불내역상세  계산서:지급 = 1:N
								LEFT OUTER JOIN TB_CM06M01 C ON C.ID = T.MNG_ID
					 WHERE 1 = 1
					--   AND T.CO_CD = 'GUN'
					   AND T.CO_CD = 
						       CASE 
						         WHEN EXISTS (SELECT 1 FROM TB_CR02M01 WHERE CO_CD = 'GUN' AND ORDRS_NO = #{ordrsNo}) THEN 'GUN'
						         ELSE 'TRN'
				       			END
					   AND T.CTRT_APPROVAL_NO = #{ctrtApprovalNo}
		   			   AND D20.BILL_NO IS NOT NULL
					   AND T.ORDRS_NO = #{ordrsNo}
					   AND SUBSTR(C.DEPT_ID,0,5) = #{deptId}
					GROUP BY T.CTRT_NO
		)
		SELECT 
				  FN_CM05M01_CD_TO_NM(T.CO_CD)		AS CO_CD_NM
				, T.CO_CD
				, T.ORDRS_NO
				, MAX(T.MNG_ID) 					AS MNG_ID
				, FN_CM06M01_ID_TO_NM(MAX(T.MNG_ID)) AS MNG_ID_NM
				, MAX(CM.CLNT_PJT)					AS CLNT_PJT
				, FN_CM05M01_CD_TO_NM(MAX(CM.CLNT_PJT)) 	AS CLNT_PJT_NM
				, SUM(T.CTRT_TOT_AMT)  					AS ORDRS_AMT 
				, TO_CHAR(MAX(T.CTRT_ORDRS_DT), 'YYYY-MM-DD') AS ORDRS_DT
				, LISTAGG(TO_CHAR(T.CTRT_ORDRS_DT, 'YYYY-MM-DD'), ',') WITHIN GROUP (ORDER BY T.ORDRS_NO) AS ORDRS_DT_ALL
				, MAX(T.CTRT_NO)					AS CTRT_NO
				, LISTAGG(T.CTRT_NO, ',') WITHIN GROUP (ORDER BY T.ORDRS_NO) AS CTRT_NO_ALL
				, LISTAGG(D2.BILL_NO, ',') WITHIN GROUP (ORDER BY T.ORDRS_NO) AS BILL_NO_ALL
				, LISTAGG(D2.BILL_DT, ',') WITHIN GROUP (ORDER BY T.ORDRS_NO) AS BILL_DT_ALL
				, MAX(D2.BILL_NO)					AS BILL_NO
				, MAX(D2.BILL_DT)					AS BILL_DT
		  FROM TB_SM11M01 T
		  			LEFT OUTER JOIN TB_CR02M01 CM ON T.ORDRS_NO = CM.ORDRS_NO	--수주마스터
		  			LEFT OUTER JOIN BILL D2 ON T.CTRT_NO = D2.CTRT_NO	
					LEFT OUTER JOIN TB_CM06M01 C ON C.ID = T.MNG_ID
		 WHERE 1 = 1
		   AND T.CO_CD = 'GUN'
		   AND T.CTRT_APPROVAL_NO = #{ctrtApprovalNo}
		   AND T.ORDRS_NO = #{ordrsNo}
		   AND SUBSTR(C.DEPT_ID,0,5) = #{deptId}
		 GROUP BY T.CO_CD, T.ORDRS_NO
	</select>

	<select id="selectPjtInfoDetail" parameterType="Map" resultType="CamelMap">
		SELECT T.CTRT_NO, T.CLNT_CD, B.CLNT_NM, T.ORDRS_NO
				, TO_CHAR(T.CTRT_DT, 'YYYY-MM-DD') 		AS CTRT_DT
				, D.CLMN_PLAN_DIV
				, FN_CM05M01_CD_TO_NM(D.CLMN_PLAN_DIV) 	AS CLMN_PLAN_DIV_NM
				, D.CTRT_NO_SEQ
				, D.CLMN_RATE
				, D.CLMN_AMT
				, TO_CHAR(D.CLMN_DT, 'YYYY-MM-DD') 			AS CLMN_DT
				, TO_CHAR(M20.BILL_DT, 'YYYY-MM-DD') 		AS BILL_DT	--계산서발행일자
				, M21.PAY_TOT 	--실지금금액
				, TO_CHAR( M21.PAY_DT, 'YYYY-MM-DD') 		AS PAY_DT 	--'실지급일자'
				, T.CTRT_NM
				, D2.SALES_CD
				, D.CLMN_PLAN_RMK
				, D.CLMN_MGMT_STATUS
				, T.REQ_NO
				, TO_CHAR(D30.BILL_DT, 'YYYY-MM-DD') 		AS BILL_DT
				, D30.BILL_AMT
				, D30.BILL_VAT
				, D30.BILL_TOT
				, TO_CHAR(W20.APR_DT1, 'YYYY-MM-DD') 		AS APR_DT1
				, TO_CHAR(W20.APR_DT2, 'YYYY-MM-DD') 		AS APR_DT2
				, DECODE(NVL(D30.HOLD_YN,'N'), 'Y', 'H', 'N') AS APR_YN3 --부사장님 보류지정건이면 'H' 아니면결재완료 여부 N
				, DECODE(NVL(D30.HOLD_YN,'N'), 'Y', '보류', TO_CHAR(W20.APR_DT3, 'YYYY-MM-DD')) AS APR_DT3 --부사장님 보류지정건이면 '보류'  
				, T.CTRT_RMK
		FROM TB_SM11M01 AS T
					LEFT OUTER JOIN TB_SM11D01 AS D ON D.CTRT_NO = T.CTRT_NO	--외주관리 대금현황
		  			LEFT OUTER JOIN TB_SM10M01 AS M10 ON M10.CTRT_NO = D.CTRT_NO AND M10.CTRT_NO_SEQ = D.CTRT_NO_SEQ  --   S10.COST_NO = T.CLNT_CD 	--기타비용
		  			LEFT OUTER JOIN TB_SM12D01 AS D12 ON D12.ORDRG_NO = M10.COST_NO  --매입확정
		  			LEFT OUTER JOIN TB_SM20D01 AS D20 ON D20.PCHS_NO = M10.PCHS_NO  --계산서상세
		  			LEFT OUTER JOIN TB_SM20M01 AS M20 ON M20.BILL_NO = D20.BILL_NO  --계산서상세
					LEFT OUTER JOIN TB_SM30D01 D30   ON D30.FILE_TRGT_KEY = M20.APR_REQ_NO 
													AND D30.CO_CD   = M20.CO_CD 
													AND D30.CLNT_CD = M20.CLNT_CD
													AND D30.CTRT_NO = M10.CTRT_NO
		  			LEFT OUTER JOIN TB_SM30M01 AS M30 ON M30.FILE_TRGT_KEY = D30.FILE_TRGT_KEY  --대금지급 결재요청
		  			LEFT OUTER JOIN (
						  			SELECT     
									    min(TODO_NO) AS TODO_NO
										, MAX(CASE WHEN TODO_ID = M30.CREAT_ID THEN TODO_ID ELSE NULL END) 					AS APR_ID1
										, MAX(CASE WHEN TODO_ID = M30.CREAT_ID THEN NVL(SANCTN_STTUS, 'N') ELSE NULL END) 	AS APR_YN1
										, MAX(CASE WHEN TODO_ID = M30.CREAT_ID THEN NVL(TODO_CF_DT, '') ELSE NULL END) 		AS APR_DT1
										, MAX(CASE WHEN TODO_ID = (SELECT MNG_ID  FROM TB_CM04M01 WHERE DEPT_ID = ( SELECT substr(DEPT_ID,0, 5) FROM tb_cm06M01 WHERE id = M30.CREAT_ID )) THEN TODO_ID ELSE NULL END) 					AS APR_ID2
										, MAX(CASE WHEN TODO_ID = (SELECT MNG_ID  FROM TB_CM04M01 WHERE DEPT_ID = ( SELECT substr(DEPT_ID,0, 5) FROM tb_cm06M01 WHERE id = M30.CREAT_ID )) THEN NVL(SANCTN_STTUS, 'N') ELSE NULL END) 	AS APR_YN2
										, MAX(CASE WHEN TODO_ID = (SELECT MNG_ID  FROM TB_CM04M01 WHERE DEPT_ID = ( SELECT substr(DEPT_ID,0, 5) FROM tb_cm06M01 WHERE id = M30.CREAT_ID )) THEN NVL(TODO_CF_DT, '') ELSE NULL END) 		AS APR_DT2
										, MAX(CASE WHEN TODO_ID = 'EMJ8105' THEN TODO_ID ELSE NULL END) 				AS APR_ID3
										, MAX(CASE WHEN TODO_ID = 'EMJ8105' THEN NVL(SANCTN_STTUS, 'N') ELSE NULL END) 	AS APR_YN3
										, MAX(CASE WHEN TODO_ID = 'EMJ8105' THEN NVL(TODO_CF_DT, '') ELSE NULL END) 	AS APR_DT3
									 FROM TB_WB20M03 AS WB20
					 						LEFT OUTER JOIN TB_SM30M01 AS M30 ON M30.FILE_TRGT_KEY = WB20.TODO_NO 
									WHERE TODO_DIV2_CODE_ID = 'TODODIV2170'  -- 결제진행상태	  
									GROUP BY  TODO_NO
		  							) AS W20 ON W20.TODO_NO = M20.APR_REQ_NO
		  			LEFT OUTER JOIN (
		  							SELECT BILL_NO, SUM(PAY_TOT) AS PAY_TOT, MAX(PAY_DT) AS PAY_DT, MAX(PAY_PMNTMTD) AS PAY_PMNTMTD
		  							FROM TB_SM21M01
		  							WHERE CO_CD = 'TRN'
		  							  AND BILL_NO IS NOT NULL
		  							GROUP BY BILL_NO
		  							) AS M21 ON M21.BILL_NO = D20.BILL_NO  --지불내역상세
					LEFT OUTER JOIN (
									SELECT ORDRS_NO, CTRT_NO,
									       LISTAGG(SALES_CD, ',') WITHIN GROUP (ORDER BY SALES_CD) AS SALES_CD
									FROM TB_SM11D02 AS D2 
									WHERE D2.ORDRS_AMT != 0
									GROUP BY ORDRS_NO, CTRT_NO
								) AS D2 ON D2.CTRT_NO = T.CTRT_NO
		  			LEFT OUTER JOIN TB_BM02M01 AS B ON B.CLNT_CD = T.CLNT_CD 
					LEFT OUTER JOIN TB_CM06M01 AS C ON C.ID = T.MNG_ID
		WHERE T.ORDRS_NO = #{ordrsNo}
		  AND T.CO_CD = #{coCd}
		  AND T.CTRT_APPROVAL_NO = #{ctrtApprovalNo}
		  AND SUBSTR(C.DEPT_ID,0,5) = #{deptId}
      <choose>
        <when test="problem == 'problem'"> 
          AND T.REQ_NO IS NOT NULL
        </when>
        <otherwise>
          AND T.REQ_NO IS NULL
        </otherwise>
      </choose>
		ORDER BY T.CO_CD,  B.CLNT_NM, T.CTRT_NO, B.CLNT_NM, D.CLMN_PLAN_DIV, D.CTRT_NO_SEQ
	</select>

	<select id="select_sm30_SeqNext" parameterType="map" resultType="String">
		SELECT CASE WHEN MAX(FILE_TRGT_KEY) IS NULL THEN 'APR' || TO_CHAR(SYSDATE, 'YY') || '00001'
			ELSE 'APR' || TO_CHAR(SYSDATE, 'YY') || LPAD(TO_NUMBER(SUBSTR(MAX(FILE_TRGT_KEY),LENGTH('APR' || TO_CHAR(SYSDATE,'YY')) + 1,5)) + 1, 5, '0')END AS FILE_TRGT_KEY
		FROM TB_SM30M01
	</select>

	<select id="select_sm21_chk" parameterType="map" resultType="camelMap">
		<!-- 엑셀에서 넘어온 한 행을 가상테이블로 정의 -->
		WITH EXCEL_DATA AS (
			SELECT
				  #{coCd            , jdbcType=VARCHAR}		AS CO_CD
				, #{clntCd          , jdbcType=VARCHAR}		AS CLNT_CD
				, #{clntNm          , jdbcType=VARCHAR}		AS CLNT_NM
				, #{repstNm         , jdbcType=VARCHAR}		AS REPST_NM
				, #{crn             , jdbcType=VARCHAR}		AS CRN
				, #{payInterval     , jdbcType=VARCHAR}		AS PAY_INTERVAL
				, #{payTot          , jdbcType=NUMERIC}		AS PAY_TOT
				, #{payAmt          , jdbcType=NUMERIC}		AS PAY_AMT
				, #{payPmntmtd      , jdbcType=VARCHAR}		AS PAY_PMNTMTD
				, #{payPmntmtdNm    , jdbcType=VARCHAR}		AS PAY_PMNTMTD_NM
				, #{payExpDt        , jdbcType=VARCHAR}		AS PAY_EXP_DT
				, #{payExtLoanExpDt , jdbcType=VARCHAR}		AS PAY_EXT_LOAN_EXP_DT
				, #{uploadDttm		, jdbcType=VARCHAR}		AS UPLOAD_DTTM
				, #{payDt           , jdbcType=VARCHAR}		AS PAY_DT
				, #{billNo          , jdbcType=VARCHAR}		AS BILL_NO
				, #{ctrtNo			, jdbcType=VARCHAR}		AS CTRT_NO
			FROM DUAL
		)

		<!-- 가상테이블에 마스터·실적·코드마스터 조인 후, 플래그를 CASE로 한 번에 처리 -->
		SELECT
			EX.*  
				, CASE
					WHEN BM.CLNT_CD IS NULL																THEN 'N'
					WHEN NOT (BM.CLNT_NM  = EX.CLNT_NM AND BM.CRN = EX.CRN AND BM.REPST_NM = EX.REPST_NM) THEN 'N'
					WHEN CM.CODE_ID IS NULL																THEN 'N'
					WHEN NOT (CM.CODE_NM = EX.PAY_PMNTMTD_NM)											THEN 'N'
					WHEN EX.PAY_PMNTMTD = 'PMNTMTD03' AND (EX.PAY_EXP_DT IS NULL OR EX.PAY_EXP_DT = '')	THEN 'N'
					WHEN EX.PAY_PMNTMTD = 'PMNTMTD04' AND (EX.PAY_EXT_LOAN_EXP_DT IS NULL OR EX.PAY_EXT_LOAN_EXP_DT = '') THEN 'N'
					WHEN SM.CLNT_CD IS NULL																THEN 'Y'
					ELSE																					'N'
				END AS EXCEL_USE_YN

				, CASE
					WHEN BM.CLNT_CD IS NULL																THEN '미등록된 거래처 코드'
					WHEN NOT (BM.CLNT_NM    = EX.CLNT_NM AND BM.CRN        = EX.CRN AND BM.REPST_NM   = EX.REPST_NM) THEN '구매처 정보 불일치'
					WHEN CM.CODE_ID IS NULL																THEN '미등록된 결제방식 코드'
					WHEN NOT (CM.CODE_NM = EX.PAY_PMNTMTD_NM)											THEN '확인필요'
					WHEN EX.PAY_PMNTMTD = 'PMNTMTD03' AND (EX.PAY_EXP_DT IS NULL OR EX.PAY_EXP_DT = '')	THEN '전자어음(만기일) 필수'
					WHEN EX.PAY_PMNTMTD = 'PMNTMTD04' AND (EX.PAY_EXT_LOAN_EXP_DT IS NULL OR EX.PAY_EXT_LOAN_EXP_DT = '') THEN '전자외담대(만기일) 필수'
					WHEN SM.CLNT_CD IS NULL																THEN '입력대상'
					ELSE																					'수정대상'
				END AS EXCEL_CHECK_RESULT

				<!-- 오류 플래그 설정 -->
				, CASE WHEN NOT (BM.CLNT_NM = EX.CLNT_NM)                       THEN 'Y' ELSE 'N' END AS ERR_CLNT_NM
				, CASE WHEN NOT (BM.CRN     = EX.CRN)                          THEN 'Y' ELSE 'N' END AS ERR_CRN
				, CASE WHEN NOT (BM.REPST_NM= EX.REPST_NM)                      THEN 'Y' ELSE 'N' END AS ERR_REPST_NM
				, CASE WHEN CM.CODE_ID                        IS NULL
						OR NOT (CM.CODE_NM = EX.PAY_PMNTMTD_NM)            THEN 'Y' ELSE 'N' END AS ERR_PAY_PMT_NM
				, CASE WHEN EX.PAY_PMNTMTD = 'PMNTMTD03'
						AND (EX.PAY_EXP_DT IS NULL OR EX.PAY_EXP_DT = '') THEN 'Y' ELSE 'N' END AS ERR_EXP_DT_MISSING
				, CASE WHEN EX.PAY_PMNTMTD = 'PMNTMTD04'
						AND (EX.PAY_EXT_LOAN_EXP_DT IS NULL OR EX.PAY_EXT_LOAN_EXP_DT = '') THEN 'Y' ELSE 'N' END AS ERR_EXT_LOAN_EXP_DT_MISSING

		FROM EXCEL_DATA EX
						LEFT JOIN TB_CM05M01   CM ON CM.CODE_ID       = EX.PAY_PMNTMTD
						LEFT JOIN TB_BM02M01   BM ON BM.CLNT_CD       = EX.CLNT_CD
						LEFT JOIN TB_SM21M01   SM ON SM.CLNT_CD       = EX.CLNT_CD
												<if test="payInterval != null and payInterval != ''">
												  AND SM.PAY_INTERVAL = EX.PAY_INTERVAL
												</if>
												<if test="payTot != null">
												  AND SM.PAY_TOT      = EX.PAY_TOT
												</if>
												<if test="payAmt != null">
												  AND SM.PAY_AMT      = EX.PAY_AMT
												</if>
												<if test="payPmntmtd != null and payPmntmtd != ''">
												  AND SM.PAY_PMNTMTD  = EX.PAY_PMNTMTD
												</if>
												<if test="payExpDt != null and payExpDt != ''">
												  AND SM.PAY_EXP_DT   = EX.PAY_EXP_DT
												</if>
												<if test="payDt != null and payDt != ''">
												  AND SM.PAY_DT       = EX.PAY_DT
												</if>
												<if test="billNo != null and billNo != ''">
												  AND SM.BILL_NO      = EX.BILL_NO
												</if>
	</select>

	<insert id="insert_sm30" parameterType="Map">
		INSERT INTO TB_SM30M01
			(
				  FILE_TRGT_KEY
				, PAY_YYMM
				, CO_CD
				, PCHS_CLMN_DAY
				, DEPT_ID
				, TRUN_DIV
				, PAY_DIV
				, CREAT_ID
				, CREAT_PGM
				, CREAT_DTTM
			)
		VALUES
			(
				  #{fileTrgtKey}
				, #{closeYm}
				, #{coCd}
				, #{pchsClmnDay}
				, #{deptId}
				, #{trunDiv}
				, #{payDiv, jdbcType=VARCHAR}
				, #{userId}
				, #{pgmId}
				, SYSDATE
			)
	</insert>

	<insert id="insert_sm30_list" parameterType="Map">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT NVL(MAX(SEQ), 0) + 1
			FROM   TB_SM30D01
			WHERE  FILE_TRGT_KEY = #{fileTrgtKey}
		</selectKey>
		INSERT INTO TB_SM30D01
			(
				  FILE_TRGT_KEY
				, SEQ
				, CO_CD
				, CUST_ID
				, CLNT_PJT
				, ORDRS_NO
				, CTRT_NO
				, CLNT_CD
				, PCHS_AMT
				, PCHS_VAT
				, PCHS_TOT
				, BILL_DT
				, BILL_AMT
				, BILL_VAT
				, BILL_TOT
				, BILL_RMK
				, CREAT_ID
				, CREAT_DTTM
				, CREAT_PGM
				, BILL_NO
				, CTRT_APPROVAL_NO
			)
			VALUES
			(
				  #{fileTrgtKey}
				, #{seq}
				, #{coCd}
				, #{custId, jdbcType=VARCHAR}
				, #{clntPjt, jdbcType=VARCHAR}
				, #{ordrsNo, jdbcType=VARCHAR}
				, #{ctrtNo, jdbcType=VARCHAR}
				, #{clntCd}
				, #{pchsAmt}
				, #{pchsVat}
				, #{pchsTot}
				, #{billDt, jdbcType=VARCHAR}
				, #{compAmt, jdbcType=VARCHAR}
				, #{compVat, jdbcType=VARCHAR}
				, #{compTot, jdbcType=VARCHAR}
				, #{billRmk, jdbcType=VARCHAR}
				, #{userId}
				, SYSDATE
				, #{pgmId}
				, #{billNo, jdbcType=VARCHAR}
				, #{ctrtApprovalNo, jdbcType=VARCHAR}
			)
	</insert>


	<select id="select_sm30_info" resultType="CamelMap">
		SELECT  * 
		FROM TB_SM30M01
		WHERE FILE_TRGT_KEY = #{fileTrgtKey}
		AND CO_CD = #{coCd}
	</select>

	<select id="sm30_pop_grid1_selectList" parameterType="Map" resultType="camelMap">
		SELECT 
				  A.FILE_TRGT_KEY
				, A.SEQ
				, A.CO_CD
				, A.CUST_ID
				, B.CLNT_NM   						AS CUST_NM
				, A.CLNT_PJT
				, FN_CM05M01_CD_TO_NM(A.CLNT_PJT) CLNT_PJT_NM
				, A.ORDRS_NO
				, A.CTRT_NO
				, A.CLNT_CD
				, C.CLNT_NM							AS CLNT_NM
				, A.PCHS_AMT
				, A.PCHS_VAT
				, A.PCHS_TOT
				, A.BILL_TOT
				, A.BILL_NO
				, A.CTRT_APPROVAL_NO
				, TO_CHAR(A.BILL_DT,    'YYYY-MM-DD') AS BILL_DT
				, TO_CHAR(A.CREAT_DTTM, 'YYYY-MM-DD') AS APROVAL_DT
				, A.CREAT_ID						AS APROVAL_ID
				, FN_CM06M01_ID_TO_NM(A.CREAT_ID)  	AS APROVAL_NM
				, SM.FILE_TRGT_KEY					AS SM11_FILE_TRGT_KEY
				, A.HOLD_YN
		FROM TB_SM30D01 A
						LEFT OUTER JOIN  TB_BM02M01 B ON B.CLNT_CD = A.CUST_ID
						LEFT OUTER JOIN  TB_BM02M01 C ON C.CLNT_CD = A.CLNT_CD
						LEFT OUTER JOIN  TB_SM11M01 SM ON SM.CTRT_NO = A.CTRT_NO
		WHERE A.FILE_TRGT_KEY = #{fileTrgtKey}
		  AND A.CO_CD = #{coCd}
	</select>

	<delete id="delete_sm30_master" parameterType="Map">
		DELETE TB_SM30M01 WHERE FILE_TRGT_KEY = #{fileTrgtKey}
	</delete>

	<delete id="delete_sm30_detail" parameterType="Map">
		DELETE TB_SM30D01 
		WHERE FILE_TRGT_KEY = #{fileTrgtKey}
		AND SEQ = #{seq}
	</delete>

	<delete id="delete_sm30_all" parameterType="Map">
		DELETE TB_SM30D01 
		WHERE FILE_TRGT_KEY = #{fileTrgtKey}
	</delete>


	<select id="selectApprovalUserChk" parameterType="Map" resultType="camelMap">
		SELECT 
				MAX(NVL(SANCTN_STTUS,'N')) AS SANCTN_STTUS
		FROM TB_WB20M03
		WHERE 1=1
		  AND TODO_NO = #{reqNo}
		  AND TODO_DIV2_CODE_ID='TODODIV2170'
	</select>

	<select id="selectShareUserChk" parameterType="Map" resultType="camelMap">
		SELECT 
				*
		FROM TB_WB20M03
		WHERE 1=1
		  AND TODO_NO = #{reqNo}
		  AND TODO_DIV2_CODE_ID='TODODIV2170'
	</select>

	<update id="updateApprovalHold" parameterType="Map">
		UPDATE TB_SM30D01
		SET
			  UDT_ID		= #{userId}
			, UDT_DTTM		= SYSDATE
			, UDT_PGM		= #{pgmId}
			, HOLD_ID 		= #{holdId}
			, HOLD_DTTM 	= SYSDATE
			, HOLD_YN 		= #{holdYn}
		WHERE FILE_TRGT_KEY = #{fileTrgtKey}
		  AND SEQ = #{seq}
	</update>

	<!-- 결재 승인 -->
	<update id="updateApprovalSm30" parameterType="Map">
		UPDATE TB_WB20M03
		SET
		  TODO_CF_DT = SYSDATE
		, SANCTN_STTUS = 'Y'
		, UDT_ID 			= #{userId}
		, UDT_PGM			= #{pgmId}
		, UDT_DTTM 			= SYSDATE
		WHERE TODO_KEY 				= #{todoKey}
		  AND TODO_ID 				= #{userId}
		  AND SANCTN_SN 			= #{sanctnSn}
		  AND TODO_DIV1_CODE_ID 	= #{todoDiv1CodeId}
		  AND TODO_DIV2_CODE_ID 	= #{todoDiv2CodeId}
	</update>

	<!-- 요청자와 결재자가 동일한경우에 처리하기 위함 (ex.팀장이 생성할경우 본인작성건 본인이 결재해야함) -->
	<insert id="insertSm30ApprovalList" parameterType="Map">
        <selectKey keyProperty="toDoKey" resultType="Int" order="BEFORE">
            SELECT NVL(MAX(TODO_KEY), 0) + 1 AS TODO_KEY FROM TB_WB20M03
        </selectKey>
    <choose>
        <when test="userId == usrNm">
        --생성자와 결재자가 동일하면 결재완료로 등록하기
	        INSERT INTO TB_WB20M03
	        (
	            TODO_KEY,
	            SANCTN_SN,
	            CO_CD,
	            TODO_DIV1_CODE_ID,
	            TODO_DIV2_CODE_ID,
	            TODO_ID,
	            SALES_CD,
	            PG_PATH,
	            TODO_FILE_TRGT_KEY,
	            TODO_CO_CD,
	            TODO_NO,
	            CREAT_ID,
	            CREAT_PGM,
	            CREAT_DTTM,
	            PG_PARAM,
	            TODO_TITL,
	            ETC_FIELD2,
				ETC_FIELD3,
				TODO_CODE_ID,
				TODO_CF_DT, 
				TODO_CF_OPN, 
				SANCTN_STTUS
	        )
	        VALUES
	        (
	            #{toDoKey},
	            #{sanCtnSn},
	            #{coCd},
	            #{todoDiv1CodeId},
	            #{todoDiv2CodeId},
	            #{usrNm},
	            #{salesCd, jdbcType=VARCHAR},
	            #{pgPath},
	            #{fileTrgtKey},
	            #{todoCoCd},
	            #{reqNo},
	            #{userId},
	            #{pgmId},
				SYSDATE,
	            #{pgParam},
	            #{todoTitle, jdbcType=VARCHAR},
	            #{histNo, jdbcType=VARCHAR},
				'N',
				'insertWbsApprovalLi-',
				SYSDATE,
				'',
				'Y'
	        )
        </when>
        <otherwise>
	        INSERT INTO TB_WB20M03
	        (
	            TODO_KEY,
	            SANCTN_SN,
	            CO_CD,
	            TODO_DIV1_CODE_ID,
	            TODO_DIV2_CODE_ID,
	            TODO_ID,
	            SALES_CD,
	            PG_PATH,
	            TODO_FILE_TRGT_KEY,
	            TODO_CO_CD,
	            TODO_NO,
	            CREAT_ID,
	            CREAT_PGM,
	            CREAT_DTTM,
	            PG_PARAM,
	            TODO_TITL,
	            ETC_FIELD2,
				ETC_FIELD3,
				TODO_CODE_ID
	        )
	        VALUES
	        (
	            #{toDoKey},
	            #{sanCtnSn},
	            #{coCd},
	            #{todoDiv1CodeId},
	            #{todoDiv2CodeId},
	            #{usrNm},
	            #{salesCd, jdbcType=VARCHAR},
	            #{pgPath},
	            #{fileTrgtKey},
	            #{todoCoCd},
	            #{reqNo},
	            #{userId},
	            #{pgmId},
				SYSDATE,
	            #{pgParam},
	            #{todoTitle, jdbcType=VARCHAR},
	            #{histNo, jdbcType=VARCHAR},
				'N',
				'insertWbsApprovalLi-'
	        )
        </otherwise>
    </choose>
	</insert>

	<!-- 결재자 삭제 -->
	<delete id="deleteShareUser" parameterType="Map">
        DELETE 
		FROM TB_WB20M03
		WHERE SALES_CD  = #{salesCd}
		  AND TODO_NO  = #{reqNo}
		  AND TODO_KEY = #{todoKey}
		  AND SANCTN_SN = #{sanctnSn}
		  AND TODO_DIV2_CODE_ID IN ('TODODIV1170','TODODIV2170')
	</delete>
</mapper>
