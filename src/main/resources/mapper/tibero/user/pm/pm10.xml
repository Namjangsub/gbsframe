<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dksys.biz.user.pm.pm10.mapper.PM10Mapper">

    <select id="selectMnList" parameterType="Map" resultType="CamelMap">
		SELECT ROWNUM AS RNUM
		     , A.*
		FROM   (
				SELECT
					    TO_CHAR(T.MN_DATE, 'YYYY-MM-DD') 	AS MN_DATE,
					    MAX(T.MN_WEEKS)              		AS MN_WEEKS,
					    MAX(T.MN_RMK)                		AS MN_RMK,
					    D1.MN_SUB_SEQ,
					    D1.MN_SUBJECT,
					
					    -- GUN00: 임원실
						MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN00' THEN D3.MN_CNTS) END) AS GUN00_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN00' THEN D3.MN_ETC    END) AS GUN00_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN00' THEN D3.MN_RESULT END) AS GUN00_MN_RESULT,
					
					    -- GUN30: 영업팀
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN30' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS GUN30_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN30' THEN D3.MN_ETC    END) AS GUN30_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN30' THEN D3.MN_RESULT END) AS GUN30_MN_RESULT,
					
					    -- GUN40: 기술연구소
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN40' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS GUN40_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN40' THEN D3.MN_ETC    END) AS GUN40_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN40' THEN D3.MN_RESULT END) AS GUN40_MN_RESULT,
					
					    -- GUN60: 생산팀
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN60' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS GUN60_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN60' THEN D3.MN_ETC    END) AS GUN60_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN60' THEN D3.MN_RESULT END) AS GUN60_MN_RESULT,
					
					    -- TRN5010: 기계
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5010' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS TRN5010_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5010' THEN D3.MN_ETC    END) AS TRN5010_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5010' THEN D3.MN_RESULT END) AS TRN5010_MN_RESULT,
					
					    -- TRN5020: 전기
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5020' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS TRN5020_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5020' THEN D3.MN_ETC    END) AS TRN5020_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'TRN5020' THEN D3.MN_RESULT END) AS TRN5020_MN_RESULT,
					
					    -- GUN10: 경영지원팀
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN10' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS GUN10_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN10' THEN D3.MN_ETC    END) AS GUN10_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN10' THEN D3.MN_RESULT END) AS GUN10_MN_RESULT,
					
					    -- GUN80: 전산실
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN80' THEN DECODE(#{mnDiv},'MNDIV02',NVL(D3.MN_RESULT, D3.MN_CNTS), D3.MN_CNTS) END) AS GUN80_MN_CNTS,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN80' THEN D3.MN_ETC    END) AS GUN80_MN_ETC,
					    MAX(CASE WHEN D3.MN_DEPT_CD = 'GUN80' THEN D3.MN_RESULT END) AS GUN80_MN_RESULT,
					    D1.MN_SORT_NO,
					    MAX(D1.MN_ETC_ALL) 	AS MN_ETC_ALL,
					    MAX(D1.MN_STATUS)	AS MN_STATUS,
					    MAX(T.MN_WEEKS)	AS MN_WEEKS
				FROM TB_PM10M01 T
							LEFT OUTER JOIN TB_PM10D01 D1 ON D1.MN_DATE = T.MN_DATE
							<!-- LEFT OUTER JOIN TB_PM10D02 D2 ON D2.MN_DATE = T.MN_DATE -->
							LEFT OUTER JOIN TB_PM10D03 D3 ON D3.MN_DATE = T.MN_DATE AND D3.MN_SUB_SEQ = D1.MN_SUB_SEQ
				WHERE 1 = 1
		        <if test="mnDate !=null and !mnDate.equals('')">
		        AND T.MN_DATE = #{mnDate}
		        </if>
		        <if test="mnDeptCd !=null and !mnDeptCd.equals('')">
		        AND D3.MN_DEPT_CD = #{mnDeptCd}
		        </if>
				GROUP BY T.MN_DATE, D1.MN_SORT_NO, D1.MN_SUBJECT, D1.MN_SUB_SEQ
				ORDER BY T.MN_DATE, D1.MN_SORT_NO, D1.MN_SUBJECT, D1.MN_SUB_SEQ
		       ) AS A
    </select>

	<select id="select_p10_d02_List" parameterType="Map" resultType="CamelMap">
		SELECT
				  TO_CHAR(T.MN_DATE, 'YYYY-MM-DD')					AS MN_DATE
				, T.USER_ID											AS ID
				, (SELECT FN_CM06M01_ID_TO_NM(T.USER_ID) FROM DUAL)	AS NAME
				, T.REASON_CD
				, T.REASON_RMK
				, B.LEVEL_CD
				, B.LEVEL_NM 										AS TITLE
		FROM TB_PM10D02 T
						LEFT OUTER JOIN TB_CM06M01 A ON A.ID = T.USER_ID
						LEFT OUTER JOIN TB_CM07M01 B ON B.LEVEL_CD = A.LEVEL_CD

		WHERE MN_DATE = #{mnDate}
    </select>

	<update id="pm10_main_update" parameterType="Map">
		MERGE INTO TB_PM10M01 A
			USING DUAL
			ON (
					MN_DATE 	= #{mnDate}
			   )
		WHEN MATCHED THEN
			UPDATE SET
					  MN_WEEKS			= #{mnWeeks}
					, MN_RMK			= #{mnRmk,  jdbcType=VARCHAR}
					, UDT_ID			= #{userId}
					, UDT_DTTM			= SYSDATE
					, UDT_PGM			= #{pgmId}
		WHEN NOT MATCHED THEN
		INSERT
		(
				  MN_DATE
				, MN_WEEKS
				, MN_RMK
				, CREAT_ID
				, CREAT_DTTM
				, CREAT_PGM
		)
		VALUES(
				  #{mnDate}
				, #{mnWeeks}
				, #{mnRmk,  jdbcType=VARCHAR}
				, #{userId}
				, SYSDATE
				, #{pgmId}
		)
	</update>

	<update id="pm10_d01_update" parameterType="Map">
		MERGE INTO TB_PM10D01 A
			USING DUAL
			ON (
					MN_DATE 	= #{mnDate}
				AND MN_SUB_SEQ 	= #{mnSubSeq}
			   )
		WHEN MATCHED THEN
			UPDATE SET
					  MN_SORT_NO        = #{mnSortNo}                   
					, MN_SUBJECT        = #{mnSubject}                  
					, CLNT_PJT          = #{clntPjt, jdbcType=VARCHAR}  
					, CLNT_CD           = #{clntCd, jdbcType=VARCHAR}   
					, ORDRS_NO          = #{ordrsNo, jdbcType=VARCHAR}  
					, MN_ETC_ALL        = #{mnEtcAll, jdbcType=VARCHAR}  
					, MN_STATUS         = #{mnStatus, jdbcType=VARCHAR}  
					, UDT_ID			= #{userId}
					, UDT_DTTM			= SYSDATE
					, UDT_PGM			= #{pgmId}
		WHEN NOT MATCHED THEN
		INSERT
		(
				  MN_DATE
				, MN_SUB_SEQ
				, MN_SORT_NO
				, MN_SUBJECT
				, CLNT_PJT
				, CLNT_CD
				, ORDRS_NO
				, MN_ETC_ALL
				, MN_STATUS
				, CREAT_ID
				, CREAT_DTTM
				, CREAT_PGM
		)
		VALUES(
				  #{mnDate}
				, (SELECT NVL(MAX(MN_SUB_SEQ), 0) + 1 FROM   TB_PM10D01 WHERE  MN_DATE = #{mnDate})
				, #{mnSortNo}
				, #{mnSubject}
				, #{clntPjt, jdbcType=VARCHAR}
				, #{clntCd, jdbcType=VARCHAR}
				, #{ordrsNo, jdbcType=VARCHAR}
				, #{mnEtcAll, jdbcType=VARCHAR}
				, #{mnStatus, jdbcType=VARCHAR}
				, #{userId}
				, SYSDATE
				, #{pgmId}
		)
	</update>



	<update id="pm10_d03_update" parameterType="Map">
		MERGE INTO TB_PM10D03 A
			USING DUAL
			ON (
					MN_DATE 	= #{mnDate}
				AND MN_SUB_SEQ 	= #{mnSubSeq}
		 		AND MN_DEPT_CD	= #{mnDeptCd}
			   )
		WHEN MATCHED THEN
			UPDATE
			<!-- 업데이트 시 둘중 하나의 컬럼만 없데이트 하기위해 <set> 설정 -->
			<set>
				<if test="mnDiv == 'MNDIV01'">
					MN_CNTS    = #{mnCnts}
				</if>
				<if test="mnDiv == 'MNDIV02'">
					MN_RESULT  = #{mnResult}
				</if>
				, MN_ETC			= #{mnEtc, jdbcType=VARCHAR}
				, MN_STATUS			= #{mnStatus, jdbcType=VARCHAR}
				, CLNT_PJT			= #{clntPjt, jdbcType=VARCHAR}
				, CLNT_CD			= #{clntCd, jdbcType=VARCHAR}
				, UDT_ID			= #{userId}
				, UDT_DTTM			= SYSDATE
				, UDT_PGM			= #{pgmId}
			</set>
		WHEN NOT MATCHED THEN
		INSERT
		(
				  MN_DATE
				, MN_SUB_SEQ
				, MN_DEPT_CD
				, MN_CNTS
				, MN_ETC
				, MN_RESULT
				, MN_STATUS
				, CLNT_PJT
				, CLNT_CD
				, CREAT_ID
				, CREAT_DTTM
				, CREAT_PGM
		)
		VALUES(
				  #{mnDate}
				, #{mnSubSeq}
				, #{mnDeptCd}
				, #{mnCnts, jdbcType=VARCHAR}
				, #{mnEtc, jdbcType=VARCHAR}
				, #{mnResult, jdbcType=VARCHAR}
				, #{mnStatus, jdbcType=VARCHAR}
				, #{clntPjt, jdbcType=VARCHAR}
				, #{clntCd, jdbcType=VARCHAR}
				, #{userId}
				, SYSDATE
				, #{pgmId}
		)
	</update>

<!-- 	M01 : 회의 날자 Record 삭제 -->
	<delete id="deleteMnM01"  parameterType="Map">
		DELETE FROM TB_PM10M01
		WHERE NOT EXISTS (SELECT 1 FROM tb_pm10D01 WHERE MN_DATE = #{mnDate}) 
	</delete>

<!-- 	D01 : 회의 주제 Record 삭제 -->
	<delete id="deleteMnD01"  parameterType="Map">
		DELETE FROM TB_PM10D01
		 WHERE MN_DATE     = #{mnDate}
		   AND MN_SUB_SEQ  = #{mnSubSeq}
	</delete>
    
<!-- 	D03 : 팀별 세부내용 삭제 -->
	<delete id="deleteMnD03"  parameterType="Map">
		DELETE FROM TB_PM10D03
		 WHERE MN_DATE		= #{mnDate}
		   AND MN_SUB_SEQ	= #{mnSubSeq}
	</delete>

	<!-- D01 : 정렬순서 변경 -->
	<update id="pm10_d01_sortNo_update" parameterType="Map">
		UPDATE TB_PM10D01
		SET
			  MN_SORT_NO = #{mnSortNo}
			, UDT_ID   	= #{userId}
			, UDT_PGM  	= #{pgmId}
			, UDT_DTTM 	= SYSDATE
		WHERE MN_DATE     = #{mnDate}
		  AND MN_SUB_SEQ  = #{mnSubSeq}
	</update>

	<update id="pm10_d02_update" parameterType="Map">
		MERGE INTO TB_PM10D02 A
			USING DUAL
			ON (
					MN_DATE 	= #{mnDate}
					AND USER_ID = #{attendId}
			   )
		WHEN MATCHED THEN
			UPDATE SET
					  REASON_CD			= NVL(#{reasonCd}, 'N')
					, REASON_RMK		= #{reasonRmk, jdbcType=VARCHAR}
					, UDT_ID			= #{userId}
					, UDT_DTTM			= SYSDATE
					, UDT_PGM			= #{pgmId}
		WHEN NOT MATCHED THEN
		INSERT
		(
				  MN_DATE
				, USER_ID
				, REASON_CD
				, REASON_RMK
				, CREAT_ID
				, CREAT_DTTM
				, CREAT_PGM
		)
		VALUES(
				  #{mnDate}
				, #{attendId}
				, NVL(#{reasonCd}, 'N')
				, #{reasonRmk, jdbcType=VARCHAR}
				, #{userId}
				, SYSDATE
				, #{pgmId}
		)
	</update>

	<delete id="pm10_d02_delete"  parameterType="Map">
		DELETE FROM TB_PM10D02
		 WHERE MN_DATE		= #{mnDate}
		   AND USER_ID		= #{userId}
	</delete>
    
</mapper>