<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dksys.biz.admin.cm.cm06.mapper.CM06Mapper">
	
	<select id="selectUserCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			TB_CM06M01
		WHERE
			ID = #{userId}
	</select>
	
	<select id="selectUserList" resultType="CamelMap">
		SELECT
			ID,
			EMP_NO,
			NAME,
			(SELECT LEVEL_NM FROM TB_CM07M01 WHERE LEVEL_CD = U.LEVEL_CD) AS LEVEL_NM,
			EMAIL,
			TEL_NO,
			USE_YN,
			TO_CHAR(CREAT_DTTM, 'yyyy-MM-dd') CREAT_DTTM,
			TO_CHAR(UDT_DTTM, 'yyyy-MM-dd') UDT_DTTM,
			MNG_CO_CD,
			FN_CM05M01_CD_TO_NM(MNG_CO_CD) MNG_CO_CD_NM,
			FAX_NO,
			OFF_TEL_NO,
			USER_GRADE,
			FN_CM05M01_CD_TO_NM(USER_GRADE) USER_GRADE_NM,
			CLNT_CD,
			(SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = U.CLNT_CD) AS CLNT_NM
		FROM
			TB_CM06M01 U
		WHERE 1=1
		<if test="deptId !='' and deptId != null">
			AND DEPT_ID = #{deptId}
		</if>
		<if test='useYn !="" and useYn != null'>
			AND USE_YN = #{useYn}
		</if>
		<if test='searchValue !="" and searchValue != null'>
			AND NAME = #{searchValue}
		</if>
	</select>
	
	<select id="selectUserInfo" resultType="CamelMap">
		SELECT
			ID,
			EMP_NO, 
			NAME, 
			DEPT_ID,
			(SELECT DEPT_NM FROM TB_CM04M01 WHERE DEPT_ID = U.DEPT_ID) DEPT_NM,
			LEVEL_CD,
			EMAIL, 
			TEL_NO,
			AUTH_INFO,
			TO_CHAR(ENTER_DT, 'yyyy-MM-dd') ENTER_DT,
			TO_CHAR(LEAVE_DT, 'yyyy-MM-dd') LEAVE_DT,
			USE_YN,
			TO_CHAR(CREAT_DTTM, 'yyyy-MM-dd') CREAT_DTTM,
			TO_CHAR(UDT_DTTM, 'yyyy-MM-dd') UDT_DTTM,
			MNG_CO_CD,
			FN_CM05M01_CD_TO_NM(MNG_CO_CD) MNG_CO_CD_NM,
			PASS_ERR_CNT,
			PWD_DTTM,
			SALES_AREA,
			FAX_NO,
			OFF_TEL_NO,
			VIEW_DEPT_ID,
			(SELECT DEPT_NM FROM TB_CM04M01 WHERE DEPT_ID = U.VIEW_DEPT_ID) VIEW_DEPT_ID_NM,
			NVL((SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSYN'),'N') PASS_YN , --암호규칙사용여부
		  <![CDATA[CASE WHEN (PWD_DTTM < ADD_MONTHS(SYSDATE, (-1 * NVL((SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSCHG'),9999)))) THEN 1 ELSE 0 END PASS_CHG,]]>  --암호변경주기(월)
		    NVL((SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSERRCNT'),10) PASS_CHK_CNT, --암호오류허용횟수
			USER_GRADE,
			FN_CM05M01_CD_TO_NM(USER_GRADE) USER_GRADE_NM,
			CLNT_CD,
			(SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = U.CLNT_CD) AS CLNT_NM,
			VIEW_DEPT_ID,
			(SELECT DEPT_NM FROM TB_CM04M01 WHERE DEPT_ID = U.VIEW_DEPT_ID) VIEW_DEPT_NM
		FROM
			TB_CM06M01 U 
		WHERE
			ID = #{userId}
	</select>
	
	<select id="selectUserTree" resultType="CamelMap">
		SELECT
			A.ID AS ID,
			A.NAME AS TEXT,
			--A.DEPT_ID AS PARENT,
			A.VIEW_DEPT_ID AS PARENT,
			'person' AS TYPE,
			B.DEPT_NM,
			A.LEVEL_CD,
			C.LEVEL_NM,
			A.EMAIL,
			A.TEL_NO,
			A.OFF_TEL_NO,
			A.FAX_NO,		
			A.CO_CD	
		FROM
			TB_CM06M01 A 
			INNER JOIN TB_CM04M01 B on A.VIEW_DEPT_ID = B.DEPT_ID	
			INNER JOIN TB_CM07M01 C on A.LEVEL_CD = C.LEVEL_CD	
		<where>
			<if test="useYn != null and !useYn.equals('')">
				A.USE_YN = #{useYn}
			</if>
			<if test="coCd != null and !coCd.equals('')">
				AND CO_CD = #{coCd}
			</if>	
		</where>
		 ORDER BY PARENT,  TEAM_MANAGER, LEVEL_CD DESC, TEXT
	</select>
	
	<select id="selectSignUserTree" resultType="CamelMap">
	SELECT DISTINCT A.APP_ID AS ID,          <!-- A.ID AS ID, -->
	       B.APP_USER_NM AS TEXT,
	       B.DEPT_ID AS PARENT,
	       'person' AS TYPE,
	       B.DEPT_NM
	FROM TB_BM13M01 A
				LEFT OUTER JOIN
				(
				SELECT BB.ID AS USER_ID
						, BB.NAME AS APP_USER_NM							
						, BB.LEVEL_CD
						, BB.EMAIL
						, BB.TEL_NO
						, BB.OFF_TEL_NO
						, BB.FAX_NO
						, CC.DEPT_NM
						,BB.VIEW_DEPT_ID AS DEPT_ID
					FROM TB_CM06M01 BB
					INNER JOIN TB_CM04M01 CC ON(BB.VIEW_DEPT_ID=CC.DEPT_ID) AND BB.USE_YN ='Y'
				WHERE 1=1
				) B ON(A.APP_ID=B.USER_ID)
			WHERE 1=1	
				AND CO_CD = 'GUN'
                AND APP_DIV = 'APPDIV02' 	
	</select>
	
	
	<insert id="insertUser">
		INSERT INTO TB_CM06M01 (
			ID,
			PASSWORD, 
			EMP_NO, 
			NAME, 
			CO_CD,
			DEPT_ID,
			LEVEL_CD,
			EMAIL, 
			AUTH_INFO,
			ENTER_DT,
			USE_YN,
			CREAT_ID,  
			CREAT_PGM,  
			CREAT_DTTM, 
			UDT_DTTM,
			TEL_NO,
			MNG_CO_CD,
			PASS_ERR_CNT,
			PWD_DTTM,
			SALES_AREA,
			FAX_NO,
			OFF_TEL_NO,
			USER_GRADE,
			CLNT_CD,
			VIEW_DEPT_ID
		)VALUES(
			#{userId},
			#{password},
			#{empNo},
			#{userNm},
			SUBSTR(#{deptId}, 1, 3),
			#{deptId},
			#{levelCd},
			#{email},
			#{authInfo},
			#{enterDt},
			#{useYn},
			'admin',
			'admin',
			SYSDATE,
			SYSDATE,
			#{telNo},
			#{mngCoCd},
			0,
			SYSDATE,
			#{salesArea},
			#{faxNo},
			#{offTelNo},
			#{userGrade},
			#{clntCd, jdbcType=VARCHAR},
			NVL(#{viewDeptId, jdbcType=VARCHAR},#{deptId})
		)
	</insert>
	
	<insert id="insertUserOauth">
		INSERT INTO OAUTH_CLIENT_DETAILS 
		(
			CLIENT_ID,
		    RESOURCE_IDS,
		    CLIENT_SECRET,
		    SCOPE,
		    AUTHORIZED_GRANT_TYPES,
		    WEB_SERVER_REDIRECT_URI,
		    AUTHORITIES,
		    ACCESS_TOKEN_VALIDITY,
		    REFRESH_TOKEN_VALIDITY,
		    ADDITIONAL_INFORMATION,
		    AUTOAPPROVE
		)
		VALUES
		(
			#{userId},
		    '',
		    #{password},
		    'read,write',
		    'authorization_code,password,implicit,refresh_token',
		    'http://localhost/static/index.html',
		    'ROLE_USER',
		    86400,
		    2592000,
		    '',
		    ''
		);
	</insert>
	
	<insert id="insertPgmHistory">
		<selectKey keyProperty="hisNo" resultType="String" order="BEFORE">
			SELECT TB_CM06H02_SQ01.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TB_CM06H02 
		(
			HIS_NO,
			ID,
		    NAME,
		    PGM_ID,
		    ACCS_DT,
		    ACCS_IP
		)
		VALUES
		(
			#{hisNo},
			#{id},
		    #{name},
		    #{pgmId},
		    SYSDATE,	
		    #{clientIp}	
		)
	</insert>
	
	<update id="updateUser">
		UPDATE
			TB_CM06M01
		SET
			EMP_NO = #{empNo},
			NAME = #{userNm},
			CO_CD = SUBSTR(#{deptId}, 1, 3),
			DEPT_ID = #{deptId},
			<if test="levelCd !='' and levelCd != null">
			LEVEL_CD = #{levelCd},
			</if>
			EMAIL = #{email},
			AUTH_INFO = #{authInfo},
			ENTER_DT = #{enterDt},
			USE_YN = #{useYn},
			UDT_DTTM = SYSDATE,
			TEL_NO = #{telNo},
			<if test="leaveDt !='' and leaveDt != null">
			LEAVE_DT = NVL(#{leaveDt},NULL),
			</if>
			<if test="salesArea !='' and salesArea != null">
			SALES_AREA = NVL(#{salesArea},NULL),
			</if>
			MNG_CO_CD= #{mngCoCd},
			FAX_NO = #{faxNo},
			OFF_TEL_NO = #{offTelNo},
			USER_GRADE = #{userGrade},
			CLNT_CD = #{clntCd, jdbcType=VARCHAR},
			VIEW_DEPT_ID = NVL(#{viewDeptId, jdbcType=VARCHAR},#{deptId})
		WHERE
			ID = #{userId}
	</update>
	
	<update id="updatePw">
		UPDATE
			TB_CM06M01
		SET
			PASSWORD = #{password},
			UDT_DTTM = SYSDATE,
			PASS_ERR_CNT = 0,
			PWD_DTTM = SYSDATE
		WHERE
			ID = #{userId}
	</update>
	
	<update id="updateTokenPw">
		UPDATE
			OAUTH_CLIENT_DETAILS
		SET
			CLIENT_SECRET = #{password}
		WHERE
			CLIENT_ID = #{userId}
	</update>
	
	<update id="updatePwErrCnt">
		UPDATE 
			TB_CM06M01
		SET 
			<if test="isPwErr != null and !isPwErr.equals('') and isPwErr.equals('Y'.toString())">
				PASS_ERR_CNT = NVL(PASS_ERR_CNT,0)+1,
			</if>
			<if test="isPwErr != null and !isPwErr.equals('') and isPwErr.equals('N'.toString())">
				PASS_ERR_CNT = 0,
			</if>
	    	UDT_DTTM = SYSDATE
		WHERE ID = #{userId}
	</update>
	
	<select id="selectRuleCheckList" resultType="CamelMap">
		SELECT 
		      (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSYN') PASS_YN ,  --암호규칙사용여부
		      (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSLEN') PASS_LEN , -- 암호최소길이
		      (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSCHG') PASS_CHG , --암호변경주기(월)
		      (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = 'PASSERRCNT') PASS_ERR_CNT --암호오류허용횟수
		  FROM DUAL 
	</select>
	
	<update id="updateUserN">
		UPDATE 
			TB_CM06M01
		SET
			USE_YN = 'N'
		WHERE 
			ID = #{userId}
	</update>
	
	<select id="selectUserStatusList" resultType="CamelMap">
		SELECT 
		    ID, 
			SCD_LOAD, 
			QC_LOAD, 
			JOB_LOAD, 
			COMM_LOAD,
			MESSAGE,
			CASE WHEN to_char(NVL(CASE WHEN udt_dttm IS NULL THEN  CREAT_DTTM  ELSE udt_dttm END,'1900-01-01') , 'YYYY-MM-DD')  =  to_char(sysdate, 'YYYY-MM-DD') THEN 'N' ELSE 'Y' END 
			  AS USER_STATUS
		  FROM TB_CM06D01 
		 WHERE ID = #{userId}
	</select>
	
	<update id="updateUserStatus">
		MERGE INTO TB_CM06D01 
			USING DUAL
			ON (
				ID = #{userId}
				)		
		WHEN MATCHED THEN
			UPDATE SET	
				SCD_LOAD = #{scdLoad}
				, QC_LOAD = #{qcLoad}
				, JOB_LOAD = #{jobLoad}
				, COMM_LOAD = #{commLoad}
				, UDT_DTTM = SYSDATE
				, UDT_ID = #{userId}
				, UDT_PGM = #{pgmId}
				, MESSAGE = #{message, jdbcType=VARCHAR}
		WHEN NOT MATCHED THEN						
		INSERT 
		(
			ID, 
			SCD_LOAD, 
			QC_LOAD, 
			JOB_LOAD, 
			COMM_LOAD,
			CREAT_ID,
			CREAT_DTTM,
			CREAT_PGM,
			MESSAGE
		) 
		VALUES
		(       
			#{userId}
			, #{scdLoad}
			, #{qcLoad}
			, #{jobLoad}
			, #{commLoad}
			, #{userId}
			, SYSDATE
			, #{pgmId}
			, #{message, jdbcType=VARCHAR}
		)    
	</update>
	
	<select id="selectEmployeeStatusList" resultType="CamelMap">
		SELECT
			A.ID AS ID,
			A.NAME AS NAME,
			substring(A.VIEW_DEPT_ID,0,5) AS DEPT,
			'person' AS TYPE,
			B.DEPT_NM,
			A.LEVEL_CD,
			C.LEVEL_NM,
			A.EMAIL,
			CASE WHEN A.ID = 'ceo' THEN '' ELSE A.TEL_NO END AS TEL_NO,
			A.OFF_TEL_NO,
			A.FAX_NO,
			CC.CNT,
			NVL(ST.SCD_LOAD,'comm1') SCD_LOAD,
			NVL(ST.QC_LOAD,'comm1') QC_LOAD ,
			NVL(ST.JOB_LOAD,'comm1') JOB_LOAD ,
			NVL(ST.COMM_LOAD,'comm1') COMM_LOAD,
			WORK_RPT_S,
			FN_CM05M01_CD_TO_NM(WORK_RPT_S) AS WORK_HOLY_NM,
			WORK_RPT_RMK
		FROM
			TB_CM06M01 A	
			LEFT OUTER JOIN (SELECT SUBSTRING(VIEW_DEPT_ID,0,5) AS DEPT,
								   COUNT(ID) AS CNT
							  FROM TB_CM06M01
							 WHERE CLNT_CD IS NULL
							   AND USE_YN = 'Y'
							 GROUP BY substring(VIEW_DEPT_ID,0,5)
							) CC ON substring(A.VIEW_DEPT_ID,0,5) = CC.DEPT	
			INNER JOIN TB_CM07M01 C on A.LEVEL_CD = C.LEVEL_CD
			INNER JOIN TB_CM04M01 B on CC.DEPT = B.DEPT_ID AND B.DEPT_TYPE = 'REAL'
			LEFT OUTER JOIN TB_CM06D01 ST ON A.ID = ST.ID
			LEFT OUTER JOIN (SELECT WORK_RPT_ID, min(WORK_RPT_S) AS WORK_RPT_S, min(WORK_RPT_RMK) AS WORK_RPT_RMK
							  FROM TB_PM01M01
							 WHERE 	(WORK_RPT_S LIKE '%9901' OR  WORK_RPT_S LIKE '%9902' OR WORK_RPT_M = 'GUN6020') --생산팀출장
							   AND  WORK_RPT_DT = to_char(sysdate,'YYYYMMDD')
							 GROUP BY WORK_RPT_ID
							) AS G ON A.ID   = G.WORK_RPT_ID
		WHERE CLNT_CD IS NULL
		  AND A.USE_YN = 'Y'
		ORDER BY substring(A.VIEW_DEPT_ID,0,5), A.TEAM_MANAGER, A.LEVEL_CD DESC, A.NAME
	</select>
	
	
	<resultMap id="imgMap" type="hashMap">
<!-- 		<result property="base64" column="USER_IMG" javaType="[B" jdbcType="BLOB"/> -->
		<result property="USER_IMG" column="USER_IMG" jdbcType="BLOB" javaType="byte[]"/>
	</resultMap>
	<select id="checkUserIdImage" resultMap="imgMap">
		SELECT
			U.USER_IMG,
			U.ID,
			U.NAME,
			U.TEL_NO,
			U.OFF_TEL_NO,
			(SELECT LEVEL_NM FROM TB_CM07M01 WHERE LEVEL_CD = U.LEVEL_CD) AS LEVEL_NM,
			D.MESSAGE
		FROM
			TB_CM06M01 U  
				LEFT OUTER JOIN TB_CM06D01 D  ON U.ID = D.ID 
		WHERE
			U.ID = #{userId}
	</select>

<!-- 유저 이미지 Update -->
	<update id="updateUserImg">
		UPDATE
			TB_CM06M01
		SET
			USER_IMG = #{userImg, jdbcType=BLOB}
		WHERE
			ID = #{userId}
	</update>

	<resultMap id="imgMaps" type="hashMap">
		<result property="id" column="ID" jdbcType="VARCHAR"/>
		<result property="name" column="NAME" jdbcType="VARCHAR"/>
		<result property="dept" column="DEPT" jdbcType="VARCHAR"/>
		<result property="type" column="TYPE" jdbcType="VARCHAR"/>
		<result property="deptNm" column="DEPT_NM" jdbcType="VARCHAR"/>
		<result property="levelCd" column="LEVEL_CD" jdbcType="VARCHAR"/>
		<result property="levelNm" column="LEVEL_NM" jdbcType="VARCHAR"/>
		<result property="email" column="EMAIL" jdbcType="VARCHAR"/>
		<result property="telNo" column="TEL_NO" jdbcType="VARCHAR"/>
		<result property="offTelNo" column="OFF_TEL_NO" jdbcType="VARCHAR"/>
		<result property="levelNm" column="LEVEL_NM" jdbcType="VARCHAR"/>
		<result property="faxNo" column="FAX_NO" jdbcType="VARCHAR"/>
		<result property="cnt" column="CNT" jdbcType="VARCHAR"/>
		<result property="scdLoad" column="SCD_LOAD" jdbcType="VARCHAR"/>
		<result property="qcLoad" column="QC_LOAD" jdbcType="VARCHAR"/>
		<result property="jobLoad" column="JOB_LOAD" jdbcType="VARCHAR"/>
		<result property="commLoad" column="COMM_LOAD" jdbcType="VARCHAR"/>
		<result property="workRptS" column="WORK_RPT_S" jdbcType="VARCHAR"/>
		<result property="workHolyNm" column="WORK_HOLY_NM" jdbcType="VARCHAR"/>
		<result property="workRptRmk" column="WORK_RPT_RMK" jdbcType="VARCHAR"/>
		<result property="userImg" column="USER_IMG" jdbcType="BLOB" javaType="byte[]"/>
		<result property="message" column="MESSAGE" jdbcType="VARCHAR"/>
	</resultMap>
	
	<select id="checkUserIdImageList" resultMap="imgMaps">
	WITH DEPT_EMP_CNT AS 
	(
			SELECT SUBSTRING(VIEW_DEPT_ID,0,5) AS DEPT,
				   COUNT(ID) AS CNT
			  FROM TB_CM06M01
			 WHERE CLNT_CD IS NULL
			   AND USE_YN = 'Y'
			 GROUP BY substring(VIEW_DEPT_ID,0,5)
	),
	WORK_HOLY AS 
	(
			SELECT WORK_RPT_ID, min(WORK_RPT_S) AS WORK_RPT_S, min(WORK_RPT_RMK) AS WORK_RPT_RMK
			  FROM TB_PM01M01
			 WHERE 	(WORK_RPT_S LIKE '%9901' OR  WORK_RPT_S LIKE '%9902' OR WORK_RPT_M = 'GUN6020') --생산팀출장
			   AND  WORK_RPT_DT = to_char(sysdate,'YYYYMMDD')
			 GROUP BY WORK_RPT_ID
	) 
		SELECT
			A.ID 							AS ID,
			A.NAME 							AS NAME,
			substring(A.VIEW_DEPT_ID,0,5) 	AS DEPT,
			'person' 						AS TYPE,
			B.DEPT_NM,
			A.LEVEL_CD,
			C.LEVEL_NM,
			A.EMAIL,
			CASE WHEN A.ID = 'ceo' THEN '' ELSE A.TEL_NO END AS TEL_NO,
			A.OFF_TEL_NO,
	        (SELECT LEVEL_NM FROM TB_CM07M01 WHERE LEVEL_CD = A.LEVEL_CD) AS LEVEL_NM,
			A.FAX_NO,
			CC.CNT,
			NVL(ST.SCD_LOAD,'comm1') SCD_LOAD,
			NVL(ST.QC_LOAD,'comm1') QC_LOAD ,
			NVL(ST.JOB_LOAD,'comm1') JOB_LOAD ,
			NVL(ST.COMM_LOAD,'comm1') COMM_LOAD,
			WORK_RPT_S,
			FN_CM05M01_CD_TO_NM(WORK_RPT_S) AS WORK_HOLY_NM,
			WORK_RPT_RMK,
	        A.USER_IMG,
	        ST.MESSAGE
		FROM
			TB_CM06M01 A	
				LEFT OUTER JOIN DEPT_EMP_CNT AS CC ON substring(A.VIEW_DEPT_ID,0,5) = CC.DEPT	
				INNER JOIN TB_CM07M01 C on A.LEVEL_CD = C.LEVEL_CD
				INNER JOIN TB_CM04M01 B on CC.DEPT = B.DEPT_ID AND B.DEPT_TYPE = 'REAL'
				LEFT OUTER JOIN TB_CM06D01 ST ON A.ID = ST.ID
				LEFT OUTER JOIN WORK_HOLY AS G ON A.ID   = G.WORK_RPT_ID
		WHERE CLNT_CD IS NULL
		  AND A.USE_YN = 'Y'
		ORDER BY substring(A.VIEW_DEPT_ID,0,5), A.TEAM_MANAGER, A.LEVEL_CD DESC, A.NAME
	</select>
	
</mapper>